version: '3.8'

networks:
  auth:
    external: false
  web:
    external: false
  monitoring:
    external: false
  smtp:
    external: false
  db:
    external: false

services:
  caddy:
    container_name: caddy
    image: lucaslorentz/caddy-docker-proxy:latest
    restart: unless-stopped
    environment:
      - CADDY_INGRESS_NETWORKS=my-cloud_web
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DATA/caddy_data/:/data
    labels:
      caddy.email: $ADMIN_EMAIL
    ports:
      - "80:80"
      - "443:443"

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower:latest
    restart: unless-stopped
    user: $PUID:$PGID
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/localtime:/etc/localtime:ro
    command: --cleanup --interval=3600
    networks:
      - smtp
    environment:
      - WATCHTOWER_NO_STARTUP_MESSAGE=true
      - WATCHTOWER_ROLLING_RESTART=true
      - WATCHTOWER_NOTIFICATIONS_LEVEL
      - WATCHTOWER_NOTIFICATIONS=email
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM
      - WATCHTOWER_NOTIFICATION_EMAIL_TO
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD
      - WATCHTOWER_NOTIFICATION_EMAIL_DELAY

  node-exporter:
    image: prom/node-exporter:latest
    container_name: node-exporter
    restart: unless-stopped
    user: $PUID:$PGID
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    expose:
      - 9100
    networks:
      - monitoring

  cadvisor:
    container_name: cadvisor
    image: gcr.io/cadvisor/cadvisor:latest
    volumes:
      - '/var/run/docker.sock:/tmp/docker.sock:ro'
      - '/:/rootfs:ro'
      - '/var/run:/var/run:rw'
      - '/sys:/sys:ro'
      - '/var/lib/docker/:/var/lib/docker:ro'
    restart: unless-stopped
    networks:
      - monitoring
    expose:
      - 8080
    logging:
      options:
        max-size: 1g

  portainer:
    container_name: portainer
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    user: $PUID:$PGID
    command: -H unix:///var/run/docker.sock --admin-password=$PORTAINER_ADMIN_PASSWORD
    volumes:
      # ensure docker.sock is available for PGID group
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DATA/portainer/:/data
    networks:
      - web
      - auth
    labels:
      caddy: portainer.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9000}}"

  autoheal:
    container_name: autoheal
    image: willfarrell/autoheal:latest
    restart: unless-stopped
    user: $PUID:$PGID
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    networks:
      - web
      - monitoring
      - smtp

  bitwarden:
    image: vaultwarden/server:alpine
    container_name: bitwarden
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - web
      - smtp
    volumes:
      - $DATA/bitwarden/:/data
    environment:
      - WEBSOCKET_ENABLED
      - DOMAIN=https://bitwarden.$DOMAIN
      - SIGNUPS_ALLOWED
      - ADMIN_TOKEN
      - SIGNUPS_VERIFY
      - INVITATIONS_ALLOWED
      - SMTP_HOST
      - SMTP_FROM
      - SMTP_FROM_NAME
      - SMTP_PORT
      - SMTP_SSL
      - SMTP_USERNAME
      - SMTP_PASSWORD
    healthcheck:
      test: curl -f http://bitwarden:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: bitwarden.$DOMAIN
      caddy.reverse_proxy_0: "{{upstreams 80}}"
      caddy.tls: $TLS_EMAIL
      caddy.encode: gzip
      caddy.header.X-XSS-Protection: '"1; mode=block;"'
      caddy.header.X-Frame-Options: "DENY"
      caddy.header.X-Content-Type-Options: "none"
      caddy.reverse_proxy_1: "/notifications/hub/negotiate {{upstreams 80}}"
      caddy.reverse_proxy_2: "/notifications/hub {{upstreams 3012}}"

  flaresolverr:
    image: flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    networks:
      - web
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=hcaptcha-solver

  prowlarr:
    container_name: prowlarr
    image: cr.hotio.dev/hotio/prowlarr:nightly
    networks:
      - web
    restart: unless-stopped
    environment:
      - UMASK=002
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/prowlarr:/config
    depends_on:
      - flaresolverr
    labels:
      caddy: prowlarr.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9696}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  mylar3:
    container_name: mylar3
    image: cr.hotio.dev/hotio/mylar3:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - UMASK=002
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/mylar3:/config
      - $DATA/media/:/data
    depends_on:
      - flaresolverr
    labels:
      caddy: mylar3.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8090}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  kavita:
    image: kizaing/kavita:nightly
    container_name: kavita
    networks:
      - web
      - smtp
    volumes:
      - $DATA/media/:/data
      - $DATA/kavita:/kavita/config
    restart: unless-stopped
    healthcheck:
       test: curl --fail http://localhost:5000 || exit 1
       interval: 300s
       retries: 3
       start_period: 30s
       timeout: 15s
    labels:
      caddy: kavita.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 5000}}"

  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/jackett:/config
      - /etc/localtime:/etc/localtime:ro
      - $DATA/media/downloads:/downloads
    depends_on:
      - flaresolverr
    healthcheck:
      test: curl -f http://jackett:9117 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: jackett.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9117}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  transmission:
    container_name: transmission
    restart: unless-stopped
    image: haugene/transmission-openvpn:latest
    cap_add:
      - NET_ADMIN
    volumes:
      - $DATA/media/:/data
    environment:
      - OPENVPN_PROVIDER
      - OPENVPN_USERNAME
      - OPENVPN_PASSWORD
      - HEALTH_CHECK_HOST
      - PUID
      - PGID
      - TZ
      - TRANSMISSION_DOWNLOAD_DIR
      - TRANSMISSION_WEB_UI
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - web
    healthcheck:
      test: curl -f https://google.com &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: transmission.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9091}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    depends_on:
      - jackett
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DATA/sonarr/:/config
      - $DATA/media/:/data
    healthcheck:
      test: curl -f http://sonarr:8989 &> /dev/null && echo "OK" || exit 1
      interval: 15s

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    depends_on:
      - jackett
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DATA/radarr/:/config
      - $DATA/media/:/data
    healthcheck:
      test: curl -f http://radarr:7878 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: radarr.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 7878}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  emby:
    image: emby/embyserver:latest
    container_name: emby
    environment:
      - UID=$PUID
      - GID=$PGID
      - GIDLIST=$PGID
    volumes:
      - $DATA/emby/:/config
      - $DATA/media/:/mnt
    depends_on:
      - caddy
    networks:
      - web
      - smtp
    labels:
      caddy: emby.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8096}}"
    restart: unless-stopped

  ombi:
    image: linuxserver/ombi:latest
    container_name: ombi
    networks:
      - web
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/ombi/:/config
    healthcheck:
      test: curl -f http://ombi:3579 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    restart: unless-stopped
    labels:
      caddy: ombi.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 3579}}"

  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/heimdall:/config
    restart: unless-stopped
    networks:
      - web
    healthcheck:
      test: curl -f http://heimdall:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: $DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    user: $PUID:$PGID
    volumes:
      - $DATA/redis/:/data
    networks:
      - web
      - db
    command: redis-server --appendonly yes

  wallabag:
    image: wallabag/wallabag:latest
    container_name: wallabag
    restart: unless-stopped
    # https://github.com/wallabag/docker/issues/233
    #user: $PUID:$PGID
    depends_on:
      - redis
    environment:
      - SYMFONY__ENV__DOMAIN_NAME=https://wallabag.$DOMAIN
      - SYMFONY__ENV__SERVER_NAME
      - SYMFONY__ENV__FOSUSER_REGISTRATION
      - SYMFONY__ENV__FOSUSER_CONFIRMATION
      - SYMFONY__ENV__MAILER_HOST
      - SYMFONY__ENV__MAILER_PORT
      - SYMFONY__ENV__MAILER_AUTH_MODE
      - SYMFONY__ENV__MAILER_ENCRYPTION
      - SYMFONY__ENV__MAILER_USER
      - SYMFONY__ENV__MAILER_PASSWORD
      - SYMFONY__ENV__FROM_EMAIL
      - SYMFONY__ENV__TWOFACTOR_SENDER
    volumes:
      - '$DATA/wallabag/data:/var/www/wallabag/data'
      - '$DATA/wallabag/images:/var/www/wallabag/web/assets/images'
    networks:
      - web
      - smtp
    healthcheck:
      test: curl -f http://wallabag:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: wallabag.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"

  cron:
    build: ./cron
    container_name: cron
    restart: unless-stopped
    networks:
      - web
    volumes:
      - $DATA/media/downloads:/downloads
    environment:
      - VULTR_API_KEY
      - VULTR_MAX_SNAPSHOTS
    labels:
      com.centurylinklabs.watchtower.enable: "false"

  webdav:
    build: ./webdav
    container_name: webdav
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - web
    volumes:
      - $DATA/media:/data
    labels:
      com.centurylinklabs.watchtower.enable: "false"
      caddy: webdav.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8080}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  filebrowser:
    container_name: filebrowser
    image: filebrowser/filebrowser:v2
    restart: unless-stopped
    volumes:
      - '$DATA/media:/srv'
      - '$DATA/filebrowser/filebrowser.db:/database.db'
    networks:
      - web
    user: $PUID:$PGID
    labels:
      caddy: drive.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"

  hackmd:
    image: ghcr.io/linuxserver/hedgedoc:latest
    container_name: hackmd
    restart: unless-stopped
    volumes:
      - '$DATA/hackmd/config/:/config'
      - '$DATA/hackmd/db/:/data'
    environment:
      - CMD_DB_DIALECT="sqlite:/data/hackmd.db"
      - PGID
      - PUID
      - TZ
      - CMD_ALLOW_ANONYMOUS=false
      - CMD_ALLOW_EMAIL_REGISTER=false
      - CMD_DOMAIN=hackmd.$DOMAIN
      - CMD_CSP_ALLOW_FRAMING=false
      - CMD_CSP_ALLOW_PDF_EMBED=false
      - CMD_USESSL=false
      - CMD_PROTOCOL_USESSL=true
      - CMD_SESSION_SECRET
    networks:
      - web
    labels:
      caddy: hackmd.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 3000}}"

  polkadot_apps:
    image: jacogr/polkadot-js-apps:latest
    container_name: polkadot_apps
    restart: unless-stopped
    # looks like specific user is not set for apps
    #user: $PUID:$PGID
    networks:
      - web
    healthcheck:
      test: curl -f http://polkadot_apps:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    depends_on:
      - caddy
    labels:
      caddy_0: cfg.$DOMAIN
      caddy_0.tls: $TLS_EMAIL
      caddy_0.reverse_proxy: "{{upstreams 80}}"
      caddy_1: air.$DOMAIN
      caddy_1.tls: $TLS_EMAIL
      caddy_1.reverse_proxy: "{{upstreams 80}}"

  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre
    restart: unless-stopped
    environment:
      - PGID
      - PUID
      - TZ
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=0 #optional
    networks:
      - web
      - smtp
    volumes:
      - $DATA/calibre-web:/config
      - '$DATA/media/books/calibre/Calibre Library:/books'
    labels:
      caddy: calibre.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8083}}"

  monies:
    image: vedhavyas/monies:latest
    container_name: monies
    restart: unless-stopped
    user: $PUID:$PGID
    environment:
      - ZERODHA_USERNAME
      - ZERODHA_PWD
      - ZERODHA_2FA_CODE
      - LIVE_COIN_WATCH_API_KEY
    networks:
      - web
      - monitoring

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - web
      - monitoring
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - $DATA/prometheus/data:/prometheus
    depends_on:
      - monies
      - caddy
    command:
      - '--web.enable-admin-api'
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=180d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    labels:
      caddy: prometheus.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9090}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  grafana:
    image: grafana/grafana-enterprise:latest
    container_name: grafana
    restart: unless-stopped
    user: $PUID:$PGID
    networks:
      - web
      - monitoring
    depends_on:
      - prometheus
      - caddy
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - $DATA/grafana/data/:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD
      - GF_USERS_ALLOW_SIGN_UP
    labels:
      caddy: grafana.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 3000}}"

  mailserver:
    image: docker.io/mailserver/docker-mailserver:10.3.0
    container_name: mailserver
    # If the FQDN for your mail-server is only two labels (eg: example.com),
    # you can assign this entirely to `hostname` and remove `domainname`.
    hostname: mail
    domainname: $DOMAIN
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/edge/config/security/understanding-the-ports/
    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - $DATA/mailserver/mail-data/:/var/mail/
      - $DATA/mailserver/mail-state/:/var/mail-state/
      - $DATA/mailserver/mail-logs/:/var/log/mail/
      - $DATA/mailserver/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - $DATA/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mail.$DOMAIN/mail.$DOMAIN.crt:/tmp/ssl/cert/public.crt
      - $DATA/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mail.$DOMAIN/mail.$DOMAIN.key:/tmp/ssl/private/private.key
    env_file: mailserver/mailserver.env
    restart: unless-stopped
    stop_grace_period: 1m
    depends_on:
      - caddy
    networks:
      web:
      smtp:
        aliases:
          - mail.$DOMAIN
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    labels:
      caddy: mail.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.tls.key_type: rsa2048

  radicale:
    build: ./radicale
    container_name: radicale
    init: true
    read_only: true
    user: $PUID:$PGID
    depends_on:
      - caddy
    networks:
      - web
      - smtp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
      - KILL
    healthcheck:
      test: curl -f http://127.0.0.1:5232 || exit 1
      interval: 30s
      retries: 3
    restart: unless-stopped
    volumes:
      - $DATA/radicale/data:/data
      - ./radicale/config:/config/config
    labels:
      caddy: radicale.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 5232}}"
      com.centurylinklabs.watchtower.enable: "false"

  mysql:
    container_name: mysql
    image: mysql:latest
    user: $PUID:$PGID
    environment:
      - MYSQL_DATABASE
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_ROOT_PASSWORD
    command: --default-storage-engine innodb
    restart: unless-stopped
    volumes:
      - $DATA/mysql:/var/lib/mysql
    networks:
      - db
    healthcheck:
      test: mysqladmin -p$$MYSQL_ROOT_PASSWORD ping -h localhost
      interval: 20s
      start_period: 10s
      timeout: 10s
      retries: 3

  kimai:
    container_name: kimai
    image: kimai/kimai2:apache
    environment:
      - ADMINMAIL
      - ADMINPASS
      - DATABASE_URL=mysql://$MYSQL_USER:$MYSQL_PASSWORD@mysql/$MYSQL_DATABASE
      - TRUSTED_HOSTS=kimai.$DOMAIN,localhost,127.0.0.1
    depends_on:
      - caddy
      - mysql
    networks:
      - web
      - smtp
      - db
    restart: unless-stopped
    labels:
      caddy: kimai.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8001}}"

  postgres:
    container_name: postgres
    image: postgres:latest
    user: $PUID:$PGID
    environment:
      - POSTGRES_PASSWORD
    restart: unless-stopped
    volumes:
      - $DATA/postgres:/var/lib/postgresql/data
    networks:
      - db

  auth:
    container_name: auth-server
    image: ghcr.io/goauthentik/server:latest
    volumes:
      - $DATA/auth/media:/media
      - $DATA/auth/custom-templates:/templates
      - $DATA/geoip/:/geoip
    environment:
      - AUTHENTIK_SECRET_KEY
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - POSTGRES_PASSWORD
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_COOKIE_DOMAIN=$DOMAIN
      - AUTHENTIK_AVATARS=gravatar
      - AUTHENTIK_EMAIL__HOST
      - AUTHENTIK_EMAIL__PORT
      - AUTHENTIK_EMAIL__USERNAME
      - AUTHENTIK_EMAIL__PASSWORD
      - AUTHENTIK_EMAIL__USE_TLS
      - AUTHENTIK_EMAIL__TIMEOUT
      - AUTHENTIK_EMAIL__FROM
    depends_on:
      - caddy
      - postgres
      - redis
    networks:
      auth:
      web:
      smtp:
      db:
      monitoring:
    restart: unless-stopped
    command: server
    labels:
      caddy: auth.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.@match.host_0: sonarr.$DOMAIN
      caddy.reverse_proxy.@match: "{{upstreams 9000}}"

  auth-worker:
    container_name: auth-worker
    image: ghcr.io/goauthentik/server:latest
    user: root
    volumes:
      - $DATA/auth/backups:/backups
      - $DATA/auth/media:/media
      - $DATA/auth/certs:/certs
      - $DATA/auth/custom-templates:/templates
      - $DATA/geoip/:/geoip
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - AUTHENTIK_SECRET_KEY
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - POSTGRES_PASSWORD
      - AUTHENTIK_REDIS__HOST=redis
    depends_on:
      - postgres
      - redis
    networks:
      - db
    restart: unless-stopped
    command: worker

  geoip:
    container_name: geoip
    image: maxmindinc/geoipupdate:latest
    volumes:
      - $DATA/geoip/:/geoip
    environment:
      - GEOIPUPDATE_EDITION_IDS=GeoLite2-City
      - GEOIPUPDATE_FREQUENCY=8
      - GEOIPUPDATE_ACCOUNT_ID
      - GEOIPUPDATE_LICENSE_KEY
    restart: unless-stopped
