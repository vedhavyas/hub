version: '3.8'

networks:
  web:
    external: false
  monitoring:
    external: false
  smtp:
    external: false
  db:
    external: false

services:










  heimdall:
    image: linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/heimdall:/config
    restart: unless-stopped
    networks:
      - web
    healthcheck:
      test: curl -f http://heimdall:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: $DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD



  cron:
    build: ./cron
    container_name: cron
    restart: unless-stopped
    networks:
      - web
    volumes:
      - $DATA/media/downloads:/downloads
    environment:
      - VULTR_API_KEY
      - VULTR_MAX_SNAPSHOTS
    labels:
      com.centurylinklabs.watchtower.enable: "false"








  calibre-web:
    image: lscr.io/linuxserver/calibre-web:latest
    container_name: calibre
    restart: unless-stopped
    environment:
      - PGID
      - PUID
      - TZ
      - DOCKER_MODS=linuxserver/calibre-web:calibre #optional
      - OAUTHLIB_RELAX_TOKEN_SCOPE=0 #optional
    networks:
      - web
      - smtp
    volumes:
      - $DATA/calibre-web:/config
      - '$DATA/media/books/calibre/Calibre Library:/books'
    labels:
      caddy: calibre.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8083}}"

  monies:
    image: vedhavyas/monies:latest
    container_name: monies
    restart: unless-stopped
    user: $PUID:$PGID
    network_mode: service:vpn #use vpn:8080 to connect
    depends_on:
      - vpn
    environment:
      - ZERODHA_USERNAME
      - ZERODHA_PWD
      - ZERODHA_2FA_CODE
      - LIVE_COIN_WATCH_API_KEY
    networks:
      - web
      - monitoring





  mailserver:
    image: docker.io/mailserver/docker-mailserver:edge
    container_name: mailserver
    # If the FQDN for your mail-server is only two labels (eg: example.com),
    # you can assign this entirely to `hostname` and remove `domainname`.
    hostname: mail
    domainname: $DOMAIN
    # More information about the mail-server ports:
    # https://docker-mailserver.github.io/docker-mailserver/edge/config/security/understanding-the-ports/
    # To avoid conflicts with yaml base-60 float, DO NOT remove the quotation marks.
    ports:
      - "25:25"    # SMTP  (explicit TLS => STARTTLS)
      - "143:143"  # IMAP4 (explicit TLS => STARTTLS)
      - "465:465"  # ESMTP (implicit TLS)
      - "587:587"  # ESMTP (explicit TLS => STARTTLS)
      - "993:993"  # IMAP4 (implicit TLS)
    volumes:
      - $DATA/mailserver/mail-data/:/var/mail/
      - $DATA/mailserver/mail-state/:/var/mail-state/
      - $DATA/mailserver/mail-logs/:/var/log/mail/
      - $DATA/mailserver/config/:/tmp/docker-mailserver/
      - /etc/localtime:/etc/localtime:ro
      - $DATA/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mail.$DOMAIN/mail.$DOMAIN.crt:/tmp/ssl/cert/public.crt
      - $DATA/caddy_data/caddy/certificates/acme-v02.api.letsencrypt.org-directory/mail.$DOMAIN/mail.$DOMAIN.key:/tmp/ssl/private/private.key
    env_file: mailserver/mailserver.env
    restart: unless-stopped
    stop_grace_period: 1m
    depends_on:
      - caddy
    networks:
      web:
      smtp:
        aliases:
          - mail.$DOMAIN
    cap_add:
      - NET_ADMIN
      - SYS_PTRACE
    labels:
      caddy: mail.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.tls.key_type: rsa2048

  radicale:
    build: ./radicale
    container_name: radicale
    init: true
    read_only: true
    user: $PUID:$PGID
    depends_on:
      - caddy
    networks:
      - web
      - smtp
    security_opt:
      - no-new-privileges:true
    cap_drop:
      - ALL
    cap_add:
      - SETUID
      - SETGID
      - CHOWN
      - KILL
    healthcheck:
      test: curl -f http://127.0.0.1:5232 || exit 1
      interval: 30s
      retries: 3
    restart: unless-stopped
    volumes:
      - $DATA/radicale/data:/data
      - ./radicale/config:/config/config
    labels:
      caddy: radicale.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 5232}}"
      com.centurylinklabs.watchtower.enable: "false"





  postgres:
    container_name: postgres
    image: postgres:latest
    user: $PUID:$PGID
    environment:
      - POSTGRES_PASSWORD
    restart: unless-stopped
    volumes:
      - $DATA/postgres:/var/lib/postgresql/data
    networks:
      - db

  auth:
    container_name: auth-server
    image: ghcr.io/goauthentik/server:latest
    volumes:
      - $DATA/auth/media:/media
      - $DATA/auth/custom-templates:/templates
      - $DATA/geoip/:/geoip
    environment:
      - AUTHENTIK_SECRET_KEY
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - POSTGRES_PASSWORD
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_COOKIE_DOMAIN=$DOMAIN
      - AUTHENTIK_AVATARS=gravatar
      - AUTHENTIK_EMAIL__HOST
      - AUTHENTIK_EMAIL__PORT
      - AUTHENTIK_EMAIL__USERNAME
      - AUTHENTIK_EMAIL__PASSWORD
      - AUTHENTIK_EMAIL__USE_TLS
      - AUTHENTIK_EMAIL__TIMEOUT
      - AUTHENTIK_EMAIL__FROM
    depends_on:
      - caddy
      - postgres
      - redis
    networks:
      web:
      smtp:
      db:
      monitoring:
    restart: unless-stopped
    command: server
    labels:
      caddy: auth.$DOMAIN, sonarr.$DOMAIN, jackett.$DOMAIN, prowlarr.$DOMAIN, transmission.$DOMAIN, radarr.$DOMAIN, prometheus.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9000}}"

  auth-worker:
    container_name: auth-worker
    image: ghcr.io/goauthentik/server:latest
    user: root
    volumes:
      - $DATA/auth/backups:/backups
      - $DATA/auth/media:/media
      - $DATA/auth/certs:/certs
      - $DATA/auth/custom-templates:/templates
      - $DATA/geoip/:/geoip
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - AUTHENTIK_SECRET_KEY
      - AUTHENTIK_POSTGRESQL__HOST=postgres
      - AUTHENTIK_POSTGRESQL__NAME=authentik
      - AUTHENTIK_POSTGRESQL__USER=authentik
      - POSTGRES_PASSWORD
      - AUTHENTIK_REDIS__HOST=redis
      - AUTHENTIK_AVATARS=gravatar
      - AUTHENTIK_EMAIL__HOST
      - AUTHENTIK_EMAIL__PORT
      - AUTHENTIK_EMAIL__USERNAME
      - AUTHENTIK_EMAIL__PASSWORD
      - AUTHENTIK_EMAIL__USE_TLS
      - AUTHENTIK_EMAIL__TIMEOUT
      - AUTHENTIK_EMAIL__FROM
    depends_on:
      - postgres
      - redis
    networks:
      - db
      - smtp
    restart: unless-stopped
    command: worker

  geoip:
    container_name: geoip
    image: maxmindinc/geoipupdate:latest
    volumes:
      - $DATA/geoip/:/geoip
    environment:
      - GEOIPUPDATE_EDITION_IDS=GeoLite2-City
      - GEOIPUPDATE_FREQUENCY=8
      - GEOIPUPDATE_ACCOUNT_ID
      - GEOIPUPDATE_LICENSE_KEY
    restart: unless-stopped

  vpn:
    image: qmcgaw/gluetun:latest
    restart: unless-stopped
    container_name: vpn
    cap_add:
      - NET_ADMIN
    environment:
      - VPN_SERVICE_PROVIDER=mullvad
      - VPN_TYPE=wireguard
      - WIREGUARD_PRIVATE_KEY=$VPN_WIREGUARD_PRIVATE_KEY
      - WIREGUARD_ADDRESSES=$VPN_WIREGUARD_ADDRESSES
      - SERVER_CITIES=$VPN_WIREGUARD_CITIES
      - OWNED_ONLY=yes
      - FIREWALL_VPN_INPUT_PORTS=$VPN_WIREGUARD_FIRWARDED_PORT
    networks:
      web:
        aliases:
          - transmission
          - monies
