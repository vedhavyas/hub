version: '2'

networks:
  web:
  filerun:

services:
  caddy:
    container_name: caddy
    image: lucaslorentz/caddy-docker-proxy:alpine
    restart: unless-stopped
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DATA/caddy_data/:/data
    labels:
      caddy.email: $ADMIN_EMAIL
    ports:
      - 80:80
      - 443:443

  watchtower:
    container_name: watchtower
    image: containrrr/watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --cleanup --interval=3600
    environment:
      - WATCHTOWER_NOTIFICATION_EMAIL_FROM
      - WATCHTOWER_NOTIFICATION_EMAIL_TO
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PORT
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_USER
      - WATCHTOWER_NOTIFICATION_EMAIL_SERVER_PASSWORD
      - WATCHTOWER_NOTIFICATION_EMAIL_DELAY

  netdata:
    image: netdata/netdata
    container_name: netdata
    restart: unless-stopped
    hostname: netdata.$DOMAIN
    cap_add:
      - SYS_PTRACE
    security_opt:
      - apparmor:unconfined
    volumes:
      - /etc/passwd:/host/etc/passwd:ro
      - /etc/group:/host/etc/group:ro
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /etc/os-release:/host/etc/os-release:ro
    environment:
      - DOCKER_USR=root
      - VIRTUALIZATION
    healthcheck:
      test: curl -f http://netdata:19999 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    networks:
      - web
    labels:
      caddy: netdata.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 19999}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  portainer:
    container_name: portainer
    image: portainer/portainer-ce
    restart: unless-stopped
    command: -H unix:///var/run/docker.sock --admin-password=$PORTAINER_ADMIN_PASSWORD
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - $DATA/portainer/:/data
    networks:
      - web
    labels:
      caddy: portainer.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9000}}"

  bitwarden:
    image: bitwardenrs/server:1.20.0-alpine
    container_name: bitwarden
    restart: unless-stopped
    networks:
      - web
    volumes:
      - $DATA/bitwarden/:/data
    environment:
      - WEBSOCKET_ENABLED
      - DOMAIN=https://bitwarden.$DOMAIN
      - SIGNUPS_ALLOWED
      - ADMIN_TOKEN
      - SIGNUPS_VERIFY
      - INVITATIONS_ALLOWED
      - SMTP_HOST
      - SMTP_FROM
      - SMTP_FROM_NAME
      - SMTP_PORT
      - SMTP_SSL
      - SMTP_USERNAME
      - SMTP_PASSWORD
    healthcheck:
      test: curl -f http://bitwarden:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: bitwarden.$DOMAIN
      caddy.reverse_proxy_0: "{{upstreams 80}}"
      caddy.tls: $TLS_EMAIL
      caddy.encode: gzip
      caddy.header.X-XSS-Protection: '"1; mode=block;"'
      caddy.header.X-Frame-Options: "DENY"
      caddy.header.X-Content-Type-Options: "none"
      caddy.reverse_proxy_1: "/notifications/hub/negotiate {{upstreams 80}}"
      caddy.reverse_proxy_2: "/notifications/hub {{upstreams 3012}}"
      com.centurylinklabs.watchtower.monitor-only: "true"

  flaresolverr:
    image: ghcr.io/flaresolverr/flaresolverr:latest
    container_name: flaresolverr
    restart: unless-stopped
    networks:
      - web
    environment:
      - LOG_LEVEL=info
      - CAPTCHA_SOLVER=hcaptcha-solver

  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/jackett:/config
      - /etc/localtime:/etc/localtime:ro
      - $DATA/media/downloads:/downloads
    depends_on:
      - flaresolverr
    healthcheck:
      test: curl -f http://jackett:9117 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: jackett.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9117}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  transmission:
    container_name: transmission
    restart: unless-stopped
    image: haugene/transmission-openvpn:latest
    cap_add:
      - NET_ADMIN
    volumes:
      - $DATA/media/:/data
    environment:
      - OPENVPN_PROVIDER
      - OPENVPN_CONFIG
      - OPENVPN_USERNAME
      - OPENVPN_PASSWORD
      - HEALTH_CHECK_HOST
      - PUID
      - PGID
      - TZ
      - TRANSMISSION_DOWNLOAD_DIR
      - TRANSMISSION_WEB_UI
    logging:
      driver: json-file
      options:
        max-size: 10m
    networks:
      - web
    healthcheck:
      test: curl -f https://google.com &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: transmission.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 9091}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    depends_on:
      - jackett
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DATA/sonarr/:/config
      - $DATA/media/:/data
    healthcheck:
      test: curl -f http://sonarr:8989 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: sonarr.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8989}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  radarr:
    container_name: radarr
    image: linuxserver/radarr
    networks:
      - web
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    depends_on:
      - jackett
      - transmission
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - $DATA/radarr/:/config
      - $DATA/media/:/data
    healthcheck:
      test: curl -f http://radarr:7878 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: radarr.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 7878}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  jellyfin:
    container_name: jellyfin
    image: linuxserver/jellyfin:latest
    restart: unless-stopped
    networks:
      - web
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/jellyfin/:/config
      - $DATA/media/:/data
    depends_on:
      - sonarr
      - radarr
    healthcheck:
      test: curl -f http://jellyfin:8096 &> /dev/null && echo "OK" || exit 1
      interval: 15s
    labels:
      caddy: jellyfin.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8096}}"

  calibre:
    image: ghcr.io/linuxserver/calibre
    container_name: calibre
    restart: unless-stopped
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/media/books/calibre:/config
    networks:
      - web
    healthcheck:
      test: curl -f http://calibre:8080 &> /dev/null && echo "OK" || exit 1
      interval: 20s
    labels:
      caddy: calibre.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 8080}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  heimdall:
    image: ghcr.io/linuxserver/heimdall
    container_name: heimdall
    environment:
      - PUID
      - PGID
      - TZ
    volumes:
      - $DATA/heimdall:/config
    restart: unless-stopped
    networks:
      - web
    healthcheck:
      test: curl -f http://heimdall:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: $DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"
      caddy.basicauth.admin: $BASIC_AUTH_PASSWORD

  redis:
    image: redis:latest
    container_name: redis
    restart: unless-stopped
    volumes:
      - $DATA/redis/:/data
    networks:
      - web
    command: redis-server --appendonly yes

  wallabag:
    image: wallabag/wallabag
    container_name: wallabag
    restart: unless-stopped
    depends_on:
      - redis
    environment:
      - 'SYMFONY__ENV__DOMAIN_NAME=https://wallabag.$DOMAIN'
      - 'SYMFONY__ENV__SERVER_NAME=My bookmarks'
      - 'SYMFONY__ENV__FOSUSER_REGISTRATION=false'
      - 'SYMFONY__ENV__FOSUSER_CONFIRMATION=false'
      - 'SYMFONY__ENV__MAILER_HOST=$SMTP_HOST'
      - 'SYMFONY__ENV__MAILER_USER=$SMTP_USERNAME'
      - 'SYMFONY__ENV__MAILER_PASSWORD=$SMTP_PASSWORD'
      - SYMFONY__ENV__FROM_EMAIL
    volumes:
      - '$DATA/wallabag/data:/var/www/wallabag/data'
      - '$DATA/wallabag/images:/var/www/wallabag/web/assets/images'
    networks:
      - web
    healthcheck:
      test: curl -f http://wallabag:80 &> /dev/null && echo "OK" || exit 1
      interval: 5s
    labels:
      caddy: wallabag.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"

  cron:
    build: ./cron
    container_name: cron
    restart: unless-stopped
    networks:
      - web
    volumes:
      - $DATA/media/downloads:/downloads
    labels:
      com.centurylinklabs.watchtower.enable: "false"

  filerun-db:
    image: mariadb:10.5
    container_name: filerun-db
    restart: unless-stopped
    environment:
      - MYSQL_ROOT_PASSWORD
      - MYSQL_USER
      - MYSQL_PASSWORD
      - MYSQL_DATABASE
    volumes:
      - $DATA/filerun/db:/var/lib/mysql
    networks:
      - filerun
    labels:
      com.centurylinklabs.watchtower.enable: "false"

  filerun:
    image: afian/filerun
    container_name: filerun
    restart: unless-stopped
    environment:
      FR_DB_HOST: "filerun-db"
      FR_DB_PORT: 3306
      FR_DB_NAME: $MYSQL_DATABASE
      FR_DB_USER: $MYSQL_USER
      FR_DB_PASS: $MYSQL_PASSWORD
      APACHE_RUN_USER: www-data
      APACHE_RUN_USER_ID: 33
      APACHE_RUN_GROUP: www-data
      APACHE_RUN_GROUP_ID: 33
    depends_on:
      - filerun-db
      - tika
      - elasticsearch
    networks:
      - filerun
      - web
    volumes:
      - $DATA/filerun/html:/var/www/html
      - $DATA/media/drive:/user-files
    labels:
      caddy: drive.$DOMAIN
      caddy.tls: $TLS_EMAIL
      caddy.reverse_proxy: "{{upstreams 80}}"
      com.centurylinklabs.watchtower.enable: "false"

  tika:
    container_name: tika
    restart: unless-stopped
    image: logicalspark/docker-tikaserver
    networks:
      - filerun

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:6.2.4
    container_name: elasticsearch
    restart: unless-stopped
    environment:
      - "cluster.name=docker-cluster"
      - "bootstrap.memory_lock=true"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
    networks:
      - filerun
    ulimits:
      memlock:
        soft: -1
        hard: -1
    mem_limit: 1g
    volumes:
      - $DATA/elasticsearch:/usr/share/elasticsearch/data
    labels:
      com.centurylinklabs.watchtower.enable: "false"
